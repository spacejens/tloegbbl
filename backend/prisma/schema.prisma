generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output = "../EntityRelationshipDiagram.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coach {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalCoachId[]
  headCoachTeams          Team[]                    @relation(name: "headCoachTeams")
  coCoachTeams            Team[]                    @relation(name: "coCoachTeams")

  @@map("coach")
}

model ExternalCoachId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  coach                   Coach                     @relation(fields: [coachId], references: [id])
  coachId                 Int                       @map("coach_id")

  @@unique([externalId, externalSystem])

  @@map("external_coach_id")
}

model TeamType {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalTeamTypeId[]
  playerTypes             PlayerTypeInTeamType[]
  teams                   Team[]

  @@map("team_type")
}

model ExternalTeamTypeId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  teamType                TeamType                  @relation(fields: [teamTypeId], references: [id])
  teamTypeId              Int                       @map("team_type_id")

  @@unique([externalId, externalSystem])

  @@map("external_team_type_id")
}

model Team {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalTeamId[]
  headCoach               Coach                     @relation(fields: [headCoachId], references: [id], name: "headCoachTeams")
  headCoachId             Int                       @map("head_coach_id")
  coCoach                 Coach?                    @relation(fields: [coCoachId], references: [id], name: "coCoachTeams")
  coCoachId               Int?                      @map("co_coach_id")
  teamType                TeamType                  @relation(fields: [teamTypeId], references: [id])
  teamTypeId              Int                       @map("team_type_id")
  players                 Player[]
  competitions            TeamInCompetition[]
  matches                 TeamInMatch[]
  actingMatchEvents       MatchEvent[]              @relation(name: "actingMatchEvents")
  consequenceMatchEvents  MatchEvent[]              @relation(name: "consequenceMatchEvents")

  @@map("team")
}

model ExternalTeamId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  team                    Team                      @relation(fields: [teamId], references: [id])
  teamId                  Int                       @map("team_id")

  @@unique([externalId, externalSystem])

  @@map("external_team_id")
}

model Advancement {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalAdvancementId[]
  players                 PlayerHasAdvancement[]
  playerTypes             PlayerTypeHasAdvancement[]

  @@map("advancement")
}

model ExternalAdvancementId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  advancement             Advancement               @relation(fields: [advancementId], references: [id])
  advancementId           Int                       @map("advancement_id")

  @@unique([externalId, externalSystem])

  @@map("external_advancement_id")
}

model PlayerType {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalPlayerTypeId[]
  teamTypes               PlayerTypeInTeamType[]
  players                 Player[]
  advancements            PlayerTypeHasAdvancement[]

  @@map("player_type")
}

model ExternalPlayerTypeId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  playerType              PlayerType                @relation(fields: [playerTypeId], references: [id])
  playerTypeId            Int                       @map("player_type_id")

  @@unique([externalId, externalSystem])

  @@map("external_player_type_id")
}

model PlayerTypeInTeamType {
  id                      Int                       @default(autoincrement()) @id
  playerType              PlayerType                @relation(fields: [playerTypeId], references: [id])
  playerTypeId            Int                       @map("player_type_id")
  teamType                TeamType                  @relation(fields: [teamTypeId], references: [id])
  teamTypeId              Int                       @map("team_type_id")

  @@unique([playerTypeId, teamTypeId])

  @@map("player_type_in_team_type")
}

model PlayerTypeHasAdvancement {
  id                      Int                       @default(autoincrement()) @id
  playerType              PlayerType                @relation(fields: [playerTypeId], references: [id])
  playerTypeId            Int                       @map("player_type_id")
  advancement             Advancement               @relation(fields: [advancementId], references: [id])
  advancementId           Int                       @map("advancement_id")

  @@unique([playerTypeId, advancementId])

  @@map("player_type_has_advancement")
}

model Player {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalPlayerId[]
  playerType              PlayerType                @relation(fields: [playerTypeId], references: [id])
  playerTypeId            Int                       @map("player_type_id")
  team                    Team                      @relation(fields: [teamId], references: [id])
  teamId                  Int                       @map("team_id")
  advancements            PlayerHasAdvancement[]
  actingMatchEvents       MatchEvent[]              @relation(name: "actingMatchEvents")
  consequenceMatchEvents  MatchEvent[]              @relation(name: "consequenceMatchEvents")

  @@map("player")
}

model ExternalPlayerId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  player                  Player                    @relation(fields: [playerId], references: [id])
  playerId                Int                       @map("player_id")

  @@unique([externalId, externalSystem])

  @@map("external_player_id")
}

model PlayerHasAdvancement {
  id                      Int                       @default(autoincrement()) @id
  player                  Player                    @relation(fields: [playerId], references: [id])
  playerId                Int                       @map("player_id")
  advancement             Advancement               @relation(fields: [advancementId], references: [id])
  advancementId           Int                       @map("advancement_id")

  @@unique([playerId, advancementId])

  @@map("player_has_advancement")
}

model Competition {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalCompetitionId[]
  teams                   TeamInCompetition[]
  matches                 Match[]

  @@map("competition")
}

model ExternalCompetitionId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  competition             Competition               @relation(fields: [competitionId], references: [id])
  competitionId           Int                       @map("competition_id")

  @@unique([externalId, externalSystem])

  @@map("external_competition_id")
}

model TeamInCompetition {
  id                      Int                       @default(autoincrement()) @id
  team                    Team                      @relation(fields: [teamId], references: [id])
  teamId                  Int                       @map("team_id")
  competition             Competition               @relation(fields: [competitionId], references: [id])
  competitionId           Int                       @map("competition_id")

  @@unique([teamId, competitionId])

  @@map("team_in_competition")
}

enum TrophyCategory {
  TEAM_TROPHY
  PLAYER_TROPHY
}

model Trophy {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalTrophyId[]
  trophyCategory          TrophyCategory            @map("trophy_category")

  @@map("trophy")
}

model ExternalTrophyId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  trophy                  Trophy                    @relation(fields: [trophyId], references: [id])
  trophyId                Int                       @map("trophy_id")

  @@unique([externalId, externalSystem])

  @@map("external_trophy_id")
}

model Match {
  id                      Int                       @default(autoincrement()) @id
  name                    String
  externalIds             ExternalMatchId[]
  competition             Competition               @relation(fields: [competitionId], references: [id])
  competitionId           Int                       @map("competition_id")
  playedAt                DateTime                  @map("played_at") @db.Timestamptz(3)
  teams                   TeamInMatch[]
  events                  MatchEvent[]

  @@map("match")
}

model ExternalMatchId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  match                   Match                     @relation(fields: [matchId], references: [id])
  matchId                 Int                       @map("match_id")

  @@unique([externalId, externalSystem])

  @@map("external_match_id")
}

model TeamInMatch {
  id                      Int                       @default(autoincrement()) @id
  team                    Team                      @relation(fields: [teamId], references: [id])
  teamId                  Int                       @map("team_id")
  match                   Match                     @relation(fields: [matchId], references: [id])
  matchId                 Int                       @map("match_id")

  @@unique([teamId, matchId])

  @@map("team_in_match")
}

enum MatchEventActionType {
  CASUALTY
  COMPLETION
  TTM_COMPLETION
  DEFLECTION
  INTERCEPTION
  TOUCHDOWN
  MVP
  FOUL
  SENT_OFF
}

enum MatchEventConsequenceType {
  SERIOUS_INJURY
  MISS_NEXT_GAME
  NIGGLING_INJURY
  MOVEMENT_REDUCTION
  STRENGTH_REDUCTION
  AGILITY_REDUCTION
  PASSING_REDUCTION
  ARMOUR_REDUCTION
  BADLY_HURT
  DEATH
}

model MatchEvent {
  id                      Int                       @default(autoincrement()) @id
  externalIds             ExternalMatchEventId[]
  match                   Match                     @relation(fields: [matchId], references: [id])
  matchId                 Int                       @map("match_id")
  actingTeam              Team?                     @relation(fields: [actingTeamId], references: [id], name: "actingMatchEvents")
  actingTeamId            Int?                      @map("acting_team_id")
  actingPlayer            Player?                   @relation(fields: [actingPlayerId], references: [id], name: "actingMatchEvents")
  actingPlayerId          Int?                      @map("acting_player_id")
  actionType              MatchEventActionType?     @map("action_type")
  consequenceTeam         Team?                     @relation(fields: [consequenceTeamId], references: [id], name: "consequenceMatchEvents")
  consequenceTeamId       Int?                      @map("consequence_team_id")
  consequencePlayer       Player?                   @relation(fields: [consequencePlayerId], references: [id], name: "consequenceMatchEvents")
  consequencePlayerId     Int?                      @map("consequence_player_id")
  consequenceType         MatchEventConsequenceType?  @map("consequence_type")

  @@map("match_event")
}

model ExternalMatchEventId {
  id                      Int                       @default(autoincrement()) @id
  externalId              String                    @map("external_id")
  externalSystem          String                    @map("external_system")
  matchEvent              MatchEvent                @relation(fields: [matchEventId], references: [id])
  matchEventId            Int                       @map("match_event_id")

  @@unique([externalId, externalSystem])

  @@map("external_match_event_id")
}
